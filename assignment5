...  @@ -0,0 +1,507 @@
1	+/*
2	+ * To change this template, choose Tools | Templates
3	+ * and open the template in the editor.
4	+ */
5	+package assignment5;
6	+
7	+import java.awt.image.BufferedImage;
8	+import java.io.File;
9	+import java.io.IOException;
10	+import javax.imageio.ImageIO;
11	+public class Assignment5 {
12	+
13	+    /**
14	+     * @param args the command line arguments
15	+     */
16	+    public static void main(String[] args) {
17	+        try {
18	+			String s = "coin2.JPG"; // -- read image from project directory
19	+			
20	+			// -- read input image
21	+	    	File infile = new File(s);
22	+	    	BufferedImage bi = ImageIO.read(infile);
23	+
24	+	    	// -- separate image into RGB components
25	+	    	int red[][] = new int[bi.getHeight()][bi.getWidth()];
26	+	    	int grn[][] = new int[bi.getHeight()][bi.getWidth()];
27	+	    	int blu[][] = new int[bi.getHeight()][bi.getWidth()];
28	+	    	for (int i = 0; i < red.length; ++i) {
29	+	    	for (int j = 0; j < red[i].length; ++j) {
30	+	    			red[i][j] = bi.getRGB(j, i) >> 16 & 0xFF;
31	+	    			grn[i][j] = bi.getRGB(j, i) >> 8 & 0xFF;
32	+				blu[i][j] = bi.getRGB(j, i) & 0xFF;
33	+	    		}
34	+                }
35	+                
36	+                 ///////////////// Conversion to grey////////////////////
37	+                int grey[][] = new int [bi.getHeight()][bi.getWidth()];
38	+                
39	+                for(int i=0; i<grn.length; i++)
40	+                {
41	+                    for(int j=0; j<grn[0].length; j++)
42	+                    {
43	+                        grey[i][j]= (int)((0.3*red[i][j])+(0.5*grn[i][j])+(0.2*blu[i][j]));
44	+                    }
45	+                }
46	+               	
47	+	    	  // //-- Median filter operation
48	+                
49	+                // -- defining a neighbourhood around every pixel.
50	+                
51	+                double neighbourhood[][]= new double [3][3];
52	+                int padimage[][] = PadImage (grn, 3, 3);
53	+                double grn1 [][]= new double [grn.length][grn[0].length];
54	+                int size=0;
55	+                 for( int i=1; i< padimage.length - 1; ++i)
56	+                 {
57	+                     for(int j=1; j<padimage[i].length-1 ; ++j)
58	+                     {
59	+                         for(int k=-1; k<=1; ++k)
60	+                         {
61	+                             for(int l=-1;l<=1; ++l)
62	+                             {
63	+                             
64	+                                
65	+                                 neighbourhood[k+1][l+1]= padimage[i+k][j+l];
66	+                                 
67	+                             
68	+                             size= size+1;
69	+                         }
70	+                             // -- sorting
71	+                            
72	+                            sort (neighbourhood);
73	+                                      
74	+                         
75	+                         grn1[i-1][j-1]= neighbourhood [1][1];
76	+                     }
77	+                     }  
78	+                 }
79	+                 
80	+                 // Gaussian 2d operation..
81	+                 double gk[][]= new double [15][15];
82	+                
83	+                for(int y= -7; y<=7 ; ++y)
84	+                {
85	+                    for( int x=-7; x<=7 ;++x )
86	+                    {
87	+                                                 
88	+                        gk[y+7][x+7]= (1.0/ (2.0*Math.PI * 1.3 * 1.3))*Math.exp(-((x*x)+(y*y))/(2.0*1.3*1.3));
89	+                     
90	+                        //System.out.print(gk[y+7][x+7] + ",");
91	+                    }
92	+                    //System.out.println();
93	+                }
94	+            
95	+                
96	+               
97	+               
98	+                
99	+                double [][]padimage1 = PadImage( grn1, 15, 15);
100	+                int ph = padimage1.length;
101	+                int pw = padimage1[0].length;
102	+                double [][]ans = new double[grn.length][grn[0].length];
103	+                double sum=0;
104	+                for( int i=7; i< ph -7; ++i)
105	+                {
106	+                    for( int j=7; j< pw-7 ; ++j)
107	+                    {
108	+                        for(int y=-7; y<=7; ++y)
109	+                        {
110	+                           for(int x=-7; x<=7; ++x)
111	+                           {
112	+                               sum = sum + ( gk[y+7][x+7]* padimage1[i+y][j+x]);
113	+                              
114	+                           }
115	+                        }
116	+                        ans[i-7][j-7]=sum;
117	+                        sum=0;
118	+                    }
119	+                }
120	+                
121	+                 //-- Histogram stretch operation
122	+                
123	+                int []histogram = new int[256];
124	+                int p10 =0 , p90 =0;
125	+                for(int i=0; i< grn.length; ++i)
126	+                {
127	+                    for(int j=0; j< grn[0].length; ++j)
128	+                    {
129	+                        ++histogram[grn[i][j]];
130	+                    }
131	+                }
132	+                    //-- computing 10 percentile
133	+                int x1=0;
134	+	    	for(x1=0; x1<255 ; ++x1)
135	+                {
136	+                        p10 = p10 + histogram[x1];
137	+                        if(p10 > 0.1*bi.getHeight()*bi.getWidth())
138	+                        { break;}
139	+                }
140	+                p10 = x1;
141	+                
142	+                      //-- computing 90 percentile
143	+                for(x1=0; x1<255 ; ++x1)
144	+                {
145	+                        p90 = p90 + histogram[x1];
146	+                        if(p90 > 0.9*bi.getHeight()*bi.getWidth())
147	+                        { break;}
148	+                }
149	+                p90 = x1;   
150	+                       
151	+
152	+
153	+	    	       //-- applying histogram stretch.
154	+                       
155	+                 double new_grn[][] = new double [grn.length][grn[0].length];
156	+                 
157	+                 for(int i=0; i< grn.length; ++i)
158	+                 {
159	+                    for(int j=0; j< grn[0].length; ++j)
160	+                    {
161	+                        double k = 0;
162	+                        k = (255.0/(p90 - p10));
163	+                     
164	+                        new_grn[i][j] = (ans[i][j]-p10)*k; 
165	+                       
166	+                       if (new_grn[i][j]<0)
167	+                        {
168	+                            new_grn[i][j]=0;
169	+                        }
170	+                        if (new_grn[i][j]>255)
171	+                        {
172	+                            new_grn[i][j]= 255;
173	+                        }
174	+                    }
175	+                    
176	+                } 
177	+                
178	+              // Sobel detection....
179	+            
180	+                  double pg[][] = PadImage( new_grn , 3, 3);
181	+                // Creating two 3X3 kernels.
182	+                int a[][] = { {-1, -2, -1},
183	+                              { 0,  0,  0},
184	+                              { 1,  2,  1}};
185	+                int b [][] = {{-1,  0,  1},
186	+                              {-2,  0,  2},
187	+                              {-1,  0,  1}};
188	+                               
189	+                int ph1 = pg.length;
190	+                int pw1 = pg[0].length;
191	+                double gx[][] = new double[ph][pw];
192	+                double gy[][] = new double[ph][pw];
193	+                double sum1=0.0;
194	+                
195	+                // Convolving Pg[][] with a[][] to get ==>Gx.//
196	+                for(int i=1 ; i<ph1-1; ++i)
197	+                {
198	+                    for(int j=1; j<pw1-1; ++j)
199	+                    {
200	+                        for(int x=-1; x<=1; ++x)
201	+                        {
202	+                            for(int y=-1; y<=1; ++y)
203	+                            {
204	+                                sum1 = sum1 +(pg[i+x][j+y]*a[x+1][y+1]);
205	+                            }
206	+                        }
207	+                        gx[i-1][j-1]= sum1;
208	+                        sum1=0;
209	+                    }
210	+                }
211	+                
212	+                // Convolving Pg[][] with b[][] to get ==> Gy.//
213	+                for(int i=1 ; i<ph1-1; ++i)
214	+                {
215	+                    for(int j=1; j<pw1-1; ++j)
216	+                    {
217	+                        for(int x=-1; x<=1; ++x)
218	+                        {
219	+                            for(int y=-1; y<=1; ++y)
220	+                            {
221	+                                sum1 = sum1 +(pg[i+x][j+y]*b[x+1][y+1]);
222	+                       
223	+                            }
224	+                        }
225	+                        gy[i-1][j-1]= sum1;
226	+                        sum1=0;
227	+                    }
228	+                }
229	+                
230	+                // Calculating Mag [][] and Dir[][].
231	+                
232	+                double mag[][] = new double [gx.length][gx[0].length];
233	+                double dir[][] = new double [gx.length][gx[0].length];
234	+                int out_dir[][] = new int [gx.length][gx[0].length];
235	+                double out_mag[][] = new double [gx.length][gx[0].length];
236	+                for(int i=0;i<gx.length; ++i)
237	+                {
238	+                    for(int j=0; j<gx[0].length; ++j)
239	+                    {
240	+                        mag[i][j] =  (Math.sqrt((gx[i][j]*gx[i][j])+(gy[i][j]*gy[i][j])));
241	+                        if(mag[i][j]> 255)
242	+                        { mag[i][j] = 255;}
243	+                        // System.out.println(mag[i][j]);
244	+                        out_mag[i][j]= (mag[i][j]/(1020*Math.sqrt(2))*255);
245	+                        dir[i][j] =  (Math.atan2(gx[i][j], gy[i][j]));
246	+                        if(dir[i][j]<0)
247	+                        { dir[i][j]=0;}
248	+                         out_dir[i][j] = (int) ((int)((dir[i][j]+Math.PI)/(2*Math.PI)*32)*8);
249	+                        
250	+                    }
251	+                }
252	+                
253	+               
254	+                 //-- computing binarization operation 
255	+                
256	+               // int grn2[][] = new int [out_mag.length][out_mag[0].length];
257	+                for(int i=0; i < out_mag.length; ++i)
258	+                {
259	+                    for(int j=0; j < out_mag[i].length; ++j )
260	+                    {
261	+                        int t=10;
262	+                        if(out_mag[i][j]> t)
263	+                        { out_mag[i][j] = 255;}
264	+                        if( out_mag[i][j]< t)
265	+                        { out_mag[i][j] = 0; }
266	+                    }
267	+                }
268	+                // Masking................
269	+                
270	+                for(int i=0; i<out_mag.length; i++)
271	+                {
272	+                    for(int j=0; j<out_mag[i].length; j++)
273	+                    {
274	+                        if(out_mag[i][j]==0)
275	+                        { out_dir[i][j]= 0;}
276	+                        if(out_mag[i][j]==255)
277	+                        { out_dir[i][j]= out_dir[i][j];}
278	+                    }
279	+                }
280	+                
281	+                
282	+                 // -- prepare output image
283	+	    	for ( int i = 0; i < bi.getHeight(); ++i) {
284	+	    	    for (int j = 0; j < bi.getWidth(); ++j) {
285	+	    	    	int val = (int) out_mag[i][j];
286	+	    			int pixel =	(val << 16) | (val << 8) | (val);
287	+	    			bi.setRGB(j, i, pixel);
288	+	    		}
289	+	    	}
290	+                
291	+             
292	+                
293	+                
294	+
295	+	    	// -- write output image
296	+	    	s = "outputfile_coin.PNG"; 
297	+	    	File outputfile_coin = new File(s);
298	+	    	ImageIO.write(bi, "png", outputfile_coin);
299	+	    
300	+             
301	+                 // -- prepare output image
302	+	    	for ( int i = 0; i < bi.getHeight(); ++i) {
303	+	    	    for (int j = 0; j < bi.getWidth(); ++j) {
304	+	    	    	int val = (int) out_dir[i][j];
305	+	    			int pixel =	(val << 16) | (val << 8) | (val);
306	+	    			bi.setRGB(j, i, pixel);
307	+	    		}
308	+	    	}
309	+                
310	+             
311	+                
312	+                
313	+
314	+	    	// -- write output image
315	+	    	s = "outputfile_coin2.PNG"; 
316	+	    	File outputfile2 = new File(s);
317	+	    	ImageIO.write(bi, "png", outputfile2);
318	+	    } catch (IOException e) {
319	+	        System.out.println("image I/O error");
320	+	    }
321	+    }
322	+    public static void sort( double [][]neighbourhood)
323	+     {
324	+                             // -- sorting
325	+                  
326	+                   for( int i=1; i<neighbourhood.length; ++i)
327	+                   {
328	+                       for( int j=1 ; j< neighbourhood[i].length; ++j)
329	+                       {
330	+                           double temp=0;
331	+                           if(neighbourhood[i][j]< neighbourhood[i-1][j-1])
332	+                           {
333	+                               temp= neighbourhood[i][j];
334	+                               neighbourhood[i][j] = neighbourhood [i-1][j-1];
335	+                               neighbourhood [i-1][j-1]= temp;
336	+                           }
337	+                       }
338	+                   }
339	+
340	+      }
341	+    private static int[][] PadImage (int[][] _image, int height, int width)
342	+	{
343	+		
344	+		int lines = _image.length;
345	+		int samples = _image[0].length;
346	+		
347	+		int padded_lines = lines + height - 1;
348	+		int padded_samples = samples + width - 1;
349	+
350	+		int[][] paddedImage = new int[padded_lines][padded_samples];
351	+
352	+		int halfWidth = width / 2;
353	+		int halfHeight = height / 2;
354	+		
355	+		// -- Fill interior of padded array with actual image. 
356	+		for (int i = 0; i < lines; ++i) {
357	+			for (int j = 0; j < samples; ++j) {
358	+				paddedImage[i + halfHeight][j + halfWidth] = _image[i][j];
359	+			}
360	+		}
361	+
362	+		// -- Fill border of padded array with a mirror image of 
363	+		//    the actual image reflected about the boundaries.   
364	+
365	+		// left border 
366	+		for (int i = 0; i < lines; ++i) {
367	+			for (int j = 0, oj = halfWidth - 1; j < (int)halfWidth; ++j, --oj) {
368	+				paddedImage[i + halfHeight][oj] = _image[i][j];
369	+			}
370	+		}
371	+
372	+		// right border
373	+		for (int i = 0; i < lines; ++i) {
374	+			for (int j = samples - halfWidth, oj = samples + (2 * halfWidth) - 1; j < samples; ++j, --oj) {
375	+				paddedImage[i + halfHeight][oj] = _image[i][j];
376	+			}
377	+		}
378	+
379	+		// top border
380	+		for (int i = 0, oi = halfHeight - 1; i < (int)halfHeight; ++i, --oi) {
381	+			for (int j = 0; j < samples; ++j) {
382	+				paddedImage[oi][j + halfWidth] = _image[i][j];
383	+			}
384	+		}
385	+
386	+		// bottom border
387	+		for (int i = lines - halfHeight, oi = lines + (2 * halfHeight) - 1; i < lines; ++i, --oi) {
388	+			for (int j = 0; j < samples; ++j) {
389	+				paddedImage[oi][j + halfWidth] = _image[i][j]; 
390	+			}
391	+		}
392	+
393	+		// top left corner
394	+		for (int i = 0; i < (int)halfHeight; ++i) {
395	+			for (int j = 0, oj = halfWidth - 1; j < (int)halfWidth; ++j, --oj) {
396	+				paddedImage[i][oj] = paddedImage[i][j + halfWidth];
397	+			}
398	+		}
399	+
400	+		// bottom right corner
401	+		for (int i = lines + halfHeight; i < lines + (2 * halfHeight); ++i) {
402	+			for (int j = samples, oj = samples + (2 * halfWidth) - 1; j < samples + halfWidth; ++j, --oj) {
403	+				paddedImage[i][oj] = paddedImage[i][j];
404	+			}
405	+		}
406	+
407	+		// top right corner
408	+		for (int i = 0; i < (int)halfHeight; ++i) {
409	+			for (int j = samples, oj = samples + (2 * halfWidth) - 1; j < samples + halfWidth; ++j, --oj) {
410	+				paddedImage[i][oj] = paddedImage[i][j];
411	+			}
412	+		}
413	+
414	+		// bottom left corner
415	+		for (int i = lines + halfHeight; i < lines + (2 * halfHeight); ++i) {
416	+			for (int j = 0, oj = halfWidth - 1; j < (int)halfWidth; ++j, --oj) {
417	+				paddedImage[i][oj] = paddedImage[i][j + halfWidth];
418	+			}
419	+		}
420	+
421	+		return paddedImage;		
422	+	}
423	+    
424	+    private static double[][] PadImage (double[][] _image, int height, int width)
425	+	{
426	+		
427	+		int lines = _image.length;
428	+		int samples = _image[0].length;
429	+		
430	+		int padded_lines = lines + height - 1;
431	+		int padded_samples = samples + width - 1;
432	+
433	+		double[][] paddedImage = new double[padded_lines][padded_samples];
434	+
435	+		int halfWidth = width / 2;
436	+		int halfHeight = height / 2;
437	+		
438	+		// -- Fill interior of padded array with actual image. 
439	+		for (int i = 0; i < lines; ++i) {
440	+			for (int j = 0; j < samples; ++j) {
441	+				paddedImage[i + halfHeight][j + halfWidth] = _image[i][j];
442	+			}
443	+		}
444	+
445	+		// -- Fill border of padded array with a mirror image of 
446	+		//    the actual image reflected about the boundaries.   
447	+
448	+		// left border 
449	+		for (int i = 0; i < lines; ++i) {
450	+			for (int j = 0, oj = halfWidth - 1; j < (int)halfWidth; ++j, --oj) {
451	+				paddedImage[i + halfHeight][oj] = _image[i][j];
452	+			}
453	+		}
454	+
455	+		// right border
456	+		for (int i = 0; i < lines; ++i) {
457	+			for (int j = samples - halfWidth, oj = samples + (2 * halfWidth) - 1; j < samples; ++j, --oj) {
458	+				paddedImage[i + halfHeight][oj] = _image[i][j];
459	+			}
460	+		}
461	+
